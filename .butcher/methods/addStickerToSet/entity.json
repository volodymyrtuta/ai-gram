{
  "meta": {
    "deprecated": false
  },
  "group": {
    "title": "Stickers",
    "anchor": "stickers"
  },
  "object": {
    "anchor": "addstickertoset",
    "name": "addStickerToSet",
    "description": "Use this method to add a new sticker to a set created by the bot. You must use exactly one of the fields png_sticker, tgs_sticker, or webm_sticker. Animated stickers can be added to animated sticker sets and only to them. Animated sticker sets can have up to 50 stickers. Static sticker sets can have up to 120 stickers. Returns True on success.",
    "html_description": "<p>Use this method to add a new sticker to a set created by the bot. You <strong>must</strong> use exactly one of the fields <em>png_sticker</em>, <em>tgs_sticker</em>, or <em>webm_sticker</em>. Animated stickers can be added to animated sticker sets and only to them. Animated sticker sets can have up to 50 stickers. Static sticker sets can have up to 120 stickers. Returns <em>True</em> on success.</p>",
    "rst_description": "Use this method to add a new sticker to a set created by the bot. You **must** use exactly one of the fields *png_sticker*, *tgs_sticker*, or *webm_sticker*. Animated stickers can be added to animated sticker sets and only to them. Animated sticker sets can have up to 50 stickers. Static sticker sets can have up to 120 stickers. Returns :code:`True` on success.",
    "annotations": [
      {
        "type": "Integer",
        "required": true,
        "description": "User identifier of sticker set owner",
        "html_description": "<td>User identifier of sticker set owner</td>",
        "rst_description": "User identifier of sticker set owner\n",
        "name": "user_id"
      },
      {
        "type": "String",
        "required": true,
        "description": "Sticker set name",
        "html_description": "<td>Sticker set name</td>",
        "rst_description": "Sticker set name\n",
        "name": "name"
      },
      {
        "type": "InputFile or String",
        "required": false,
        "description": "PNG image with the sticker, must be up to 512 kilobytes in size, dimensions must not exceed 512px, and either width or height must be exactly 512px. Pass a file_id as a String to send a file that already exists on the Telegram servers, pass an HTTP URL as a String for Telegram to get a file from the Internet, or upload a new one using multipart/form-data. More information on Sending Files",
        "html_description": "<td><strong>PNG</strong> image with the sticker, must be up to 512 kilobytes in size, dimensions must not exceed 512px, and either width or height must be exactly 512px. Pass a <em>file_id</em> as a String to send a file that already exists on the Telegram servers, pass an HTTP URL as a String for Telegram to get a file from the Internet, or upload a new one using multipart/form-data. <a href=\"#sending-files\">More information on Sending Files &#187;</a></td>",
        "rst_description": "**PNG** image with the sticker, must be up to 512 kilobytes in size, dimensions must not exceed 512px, and either width or height must be exactly 512px. Pass a *file_id* as a String to send a file that already exists on the Telegram servers, pass an HTTP URL as a String for Telegram to get a file from the Internet, or upload a new one using multipart/form-data. :ref:`More information on Sending Files Â» <sending-files>`\n",
        "name": "png_sticker"
      },
      {
        "type": "InputFile",
        "required": false,
        "description": "TGS animation with the sticker, uploaded using multipart/form-data. See https://core.telegram.org/stickers#animated-sticker-requirements for technical requirements",
        "html_description": "<td><strong>TGS</strong> animation with the sticker, uploaded using multipart/form-data. See <a href=\"/stickers#animated-sticker-requirements\"/><a href=\"https://core.telegram.org/stickers#animated-sticker-requirements\">https://core.telegram.org/stickers#animated-sticker-requirements</a> for technical requirements</td>",
        "rst_description": "**TGS** animation with the sticker, uploaded using multipart/form-data. See `https://core.telegram.org/stickers#animated-sticker-requirements <https://core.telegram.org/stickers#animated-sticker-requirements>`_`https://core.telegram.org/stickers#animated-sticker-requirements <https://core.telegram.org/stickers#animated-sticker-requirements>`_ for technical requirements\n",
        "name": "tgs_sticker"
      },
      {
        "type": "InputFile",
        "required": false,
        "description": "WEBM video with the sticker, uploaded using multipart/form-data. See https://core.telegram.org/stickers#video-sticker-requirements for technical requirements",
        "html_description": "<td><strong>WEBM</strong> video with the sticker, uploaded using multipart/form-data. See <a href=\"/stickers#video-sticker-requirements\"/><a href=\"https://core.telegram.org/stickers#video-sticker-requirements\">https://core.telegram.org/stickers#video-sticker-requirements</a> for technical requirements</td>",
        "rst_description": "**WEBM** video with the sticker, uploaded using multipart/form-data. See `https://core.telegram.org/stickers#video-sticker-requirements <https://core.telegram.org/stickers#video-sticker-requirements>`_`https://core.telegram.org/stickers#video-sticker-requirements <https://core.telegram.org/stickers#video-sticker-requirements>`_ for technical requirements\n",
        "name": "webm_sticker"
      },
      {
        "type": "String",
        "required": true,
        "description": "One or more emoji corresponding to the sticker",
        "html_description": "<td>One or more emoji corresponding to the sticker</td>",
        "rst_description": "One or more emoji corresponding to the sticker\n",
        "name": "emojis"
      },
      {
        "type": "MaskPosition",
        "required": false,
        "description": "A JSON-serialized object for position where the mask should be placed on faces",
        "html_description": "<td>A JSON-serialized object for position where the mask should be placed on faces</td>",
        "rst_description": "A JSON-serialized object for position where the mask should be placed on faces\n",
        "name": "mask_position"
      }
    ],
    "category": "methods"
  }
}
