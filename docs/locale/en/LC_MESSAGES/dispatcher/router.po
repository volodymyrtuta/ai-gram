# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, aiogram Team
# This file is distributed under the same license as the aiogram package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: aiogram \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-08-26 23:17+0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.12.1\n"

#: ../../dispatcher/router.rst:5
msgid "Router"
msgstr ""

#: ../../dispatcher/router.rst:7
msgid "Usage:"
msgstr ""

#: aiogram.dispatcher.router.Router:1 of
msgid "Bases: :py:class:`object`"
msgstr ""

#: aiogram.dispatcher.router.Router:1 of
msgid ""
"Router can route update, and it nested update types like messages, "
"callback query, polls and all other event types."
msgstr ""

#: aiogram.dispatcher.router.Router:4 of
msgid "Event handlers can be registered in observer by two ways:"
msgstr ""

#: aiogram.dispatcher.router.Router:6 of
msgid ""
"By observer method - :obj:`router.<event_type>.register(handler, "
"<filters, ...>)`"
msgstr ""

#: aiogram.dispatcher.router.Router:7 of
msgid "By decorator - :obj:`@router.<event_type>(<filters, ...>)`"
msgstr ""

#: aiogram.dispatcher.router.Router.__init__
#: aiogram.dispatcher.router.Router.include_router
#: aiogram.dispatcher.router.Router.include_routers
#: aiogram.dispatcher.router.Router.resolve_used_update_types of
msgid "Parameters"
msgstr ""

#: aiogram.dispatcher.router.Router.__init__:1 of
msgid "Optional router name, can be useful for debugging"
msgstr ""

#: aiogram.dispatcher.router.Router.include_router:1 of
msgid "Attach another router."
msgstr ""

#: aiogram.dispatcher.router.Router.include_router
#: aiogram.dispatcher.router.Router.include_routers
#: aiogram.dispatcher.router.Router.resolve_used_update_types of
msgid "Returns"
msgstr ""

#: aiogram.dispatcher.router.Router.include_routers:1 of
msgid "Attach multiple routers."
msgstr ""

#: aiogram.dispatcher.router.Router.resolve_used_update_types:1 of
msgid "Resolve registered event names"
msgstr ""

#: aiogram.dispatcher.router.Router.resolve_used_update_types:3 of
msgid "Is useful for getting updates only for registered event types."
msgstr ""

#: aiogram.dispatcher.router.Router.resolve_used_update_types:5 of
msgid "skip specified event names"
msgstr ""

#: aiogram.dispatcher.router.Router.resolve_used_update_types:6 of
msgid "set of registered names"
msgstr ""

#: ../../dispatcher/router.rst:29
msgid "Event observers"
msgstr ""

#: ../../dispatcher/router.rst:33
msgid ""
"All handlers always should be asynchronous. The name of the handler "
"function is not important. The event argument name is also not important "
"but it is recommended to not overlap the name with contextual data in due"
" to function can not accept two arguments with the same name."
msgstr ""

#: ../../dispatcher/router.rst:36
msgid ""
"Here is the list of available observers and examples of how to register "
"handlers"
msgstr ""

#: ../../dispatcher/router.rst:38
msgid ""
"In these examples only decorator-style registering handlers are used, but"
" if you don't like @decorators just use :obj:`<event type>.register(...)`"
" method instead."
msgstr ""

#: ../../dispatcher/router.rst:41
msgid "Message"
msgstr ""

#: ../../dispatcher/router.rst:46
msgid "Be attentive with filtering this event"
msgstr ""

#: ../../dispatcher/router.rst:48
msgid ""
"You should expect that this event can be with different sets of "
"attributes in different cases"
msgstr ""

#: ../../dispatcher/router.rst:50
msgid ""
"(For example text, sticker and document are always of different content "
"types of message)"
msgstr ""

#: ../../dispatcher/router.rst:52
msgid ""
"Recommended way to check field availability before usage, for example via"
" :ref:`magic filter <magic-filters>`: :code:`F.text` to handle text, "
":code:`F.sticker` to handle stickers only and etc."
msgstr ""

#: ../../dispatcher/router.rst:63
msgid "Edited message"
msgstr ""

#: ../../dispatcher/router.rst:71
msgid "Channel post"
msgstr ""

#: ../../dispatcher/router.rst:79
msgid "Edited channel post"
msgstr ""

#: ../../dispatcher/router.rst:88
msgid "Inline query"
msgstr ""

#: ../../dispatcher/router.rst:96
msgid "Chosen inline query"
msgstr ""

#: ../../dispatcher/router.rst:104
msgid "Callback query"
msgstr ""

#: ../../dispatcher/router.rst:112
msgid "Shipping query"
msgstr ""

#: ../../dispatcher/router.rst:120
msgid "Pre checkout query"
msgstr ""

#: ../../dispatcher/router.rst:128
msgid "Poll"
msgstr ""

#: ../../dispatcher/router.rst:136
msgid "Poll answer"
msgstr ""

#: ../../dispatcher/router.rst:144
msgid "Errors"
msgstr ""

#: ../../dispatcher/router.rst:151
msgid ""
"Is useful for handling errors from other handlers, error event described "
":ref:`here <error-event>`"
msgstr ""

#: ../../dispatcher/router.rst:158
msgid "Nested routers"
msgstr ""

#: ../../dispatcher/router.rst:163
msgid ""
"Routers by the way can be nested to an another routers with some "
"limitations:"
msgstr ""

#: ../../dispatcher/router.rst:163
msgid ""
"1. Router **CAN NOT** include itself 1. Routers **CAN NOT** be used for "
"circular including (router 1 include router 2, router 2 include router 3,"
" router 3 include router 1)"
msgstr ""

#: ../../dispatcher/router.rst:167
msgid "Example:"
msgstr ""

#: ../../dispatcher/router.rst:169
msgid "module_1.py"
msgstr ""

#: ../../dispatcher/router.rst:179
msgid "module_2.py"
msgstr ""

#: ../../dispatcher/router.rst:191
msgid "Update"
msgstr ""

#: ../../dispatcher/router.rst:200
msgid "The only root Router (Dispatcher) can handle this type of event."
msgstr ""

#: ../../dispatcher/router.rst:204
msgid ""
"Dispatcher already has default handler for this event type, so you can "
"use it for handling all updates that are not handled by any other "
"handlers."
msgstr ""

#: ../../dispatcher/router.rst:207
msgid "How it works?"
msgstr ""

#: ../../dispatcher/router.rst:209
msgid ""
"For example, dispatcher has 2 routers, the last router also has one "
"nested router:"
msgstr ""

#: ../../dispatcher/router.rst:-1
msgid "Nested routers example"
msgstr ""

#: ../../dispatcher/router.rst:214
msgid "In this case update propagation flow will have form:"
msgstr ""

#~ msgid ""
#~ "Can be attached directly or by "
#~ "import string in format "
#~ "\"<module>:<attribute>\""
#~ msgstr ""

#~ msgid ""
#~ "By default Router already has an "
#~ "update handler which route all event "
#~ "types to another observers."
#~ msgstr ""

#~ msgid "Is useful for handling errors from other handlers"
#~ msgstr ""
